" .ideavimrc - Igor Zolov

"" Base Settings
"" ========================================================
set keep-english-in-normal-and-restore-in-insert
set ideajoin
set ideamarks
set idearefactormode=keep
set scrolloff=10
set number relativenumber
set showmode
set showcmd
set visualbell

set history=200
set ignorecase
set smartcase
set incsearch
set hlsearch
set nohlsearch
set ideastatusicon=gray
nnoremap <silent> <leader><space> :nohlsearch<CR>

" Use system clipboard
set clipboard+=unnamed,unnamedplus,ideaput

let mapleader = " "

"" Plugin Settings
"" ========================================================
set NERDTree
set highlightedyank
set sneak
set multiple-cursors
set quickscope
" Replaces f/F and t/T to show highlights
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
set nerdtree
set argtextobj
let g:argtextobj_pairs="(:),{:},<:>"
set textobj-entire
set surround
set mini-ai
set functiontextobj
set peekaboo
set matchit
set commentary
set exchange

" Easymotion settings
" set notimeout
set timeout
set timeoutlen=600
set easymotion


" Which-key settings
set which-key

set foldmethod=syntax
set nofoldenable
set nocompatible
syntax enable
syntax on
set wildmenu
set laststatus=2
set ruler
set nowrap
set expandtab

" Включаем блочный режим по Ctrl+V
nnoremap <silent> <C-V> <C-Q>
xnoremap <silent> <C-V> <C-Q>
nnoremap <silent> <C-Q> <C-V>
xnoremap <silent> <C-Q> <C-V>

let g:WhichKey_DefaultDelay = 600
let g:WhichKey_FontSize = 19
let g:WhichKey_ShowVimActions = "true"
let g:WhichKey_CommandColor = "#a3be8c"
let g:WhichKey_PrefixColor = "#81a1c1"
let g:WhichKey_SortOrder = "by_key_prefix_first"

"" Key mappings
"" ========================================================
inoremap <silent> <C-c> <Esc>
nnoremap <leader>f :action GotoFile<CR>
nnoremap <silent> <leader>ss :action GotoSymbol<CR>
nnoremap <silent> <leader>sf :action GotoFile<CR>
nnoremap <silent> <leader>sc :action GotoClass<CR>
nnoremap <silent> <leader>sa :action GotoAction<CR>

nnoremap ,c :edit ~/.ideavimrc<cr>
nnoremap ,h :set hlsearch<cr>
noremap ,n :set nohlsearch<cr>
nnoremap <silent> ,s :action SaveAll<CR>
nnoremap <silent> ,x :action CloseContent<CR>

" source config
noremap ,r :source ~/.ideavimrc<cr>

" remove search highlights
" noremap <Esc> :nohlsearch<cr>
"" Black hole register
nnoremap \ "_

" Paste hover without overwriting default register
xnoremap p P
nnoremap <silent> <leader>ll :action RecentLocations<CR>

" Toggle case and start typing. E.g. `<leader>iget`: `property` -> `getProperty`
nmap <leader>i ~hi
" Remove selection and toggle case. E.g. `v2l<leader>u`: `getProperty` -> `property`
vmap <leader>u d~h

" Separate line and reformat line
nnoremap <silent> <S-s> :action EditorSplitLine<CR>

" Fast esc
inoremap jj <Esc>
inoremap jk <Esc>

imap <C-i> :action ParameterInfo<CR>

" Comment line
"nmap gc :action CommentByLineComment<CR>
"vmap gc :action CommentByLineComment<CR>

" Tab navigation
nmap <M-.> :tabnext<CR>
nmap <M-,> :tabprev<CR>

" Pane navigation
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

" Move line
vnoremap <S-k> :action MoveLineUp<CR>
vnoremap <S-j> :action MoveLineDown<CR>

nnoremap <silent> <C-s-up> :action MoveStatementUp<CR>
nnoremap <silent> <C-s-down> :action MoveStatementDown<CR>

nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence

" Easy visual indentation
vnoremap < <gv
vnoremap > >gv

nnoremap <C-u>  <C-u>zz
nnoremap <C-d>  <C-d>zz

nnoremap n nzzzv
nnoremap <silent> N Nzzzv

" Execute macro saved in 'q' register
nnoremap qj @q

" Completion
inoremap <C-space> :action CodeCompletion<CR>

"" Leader commands
"" ========================================================
" Jump around with easymotion/flash
nnoremap <silent> s :action flash.search<CR>
" nnoremap <silent> / :action Find<CR>
" nnoremap <silent> s <Plug>(easymotion-s<CR>

" Fix actions
let g:WhichKeyDesc_fix_action = "<leader>q Quick Fix"
nnoremap <silent> <leader>q :action ShowIntentionActions<CR>
nnoremap <silent> <leader>cq :action ShowIntentionActions<CR>
inoremap <C-y> :action EditorChooseLookupItem<CR>


" Code Actions
"" ========================================================
let g:WhichKeyDesc_code_actions = "<leader>c Code Actions"
let g:WhichKeyDesc_code_actions_complete_statement = "<leader>cc Complete statement"
nnoremap <silent> <leader>cc :action EditorCompleteStatement<CR>
nnoremap <silent> <leader>ci :action InspectCode<CR>

let g:WhichKeyDesc_code_actions_show_hover = "<leader>k Show hover info"
nnoremap <silent> <leader>k :action ShowHoverInfo<CR>

" Folding
"" ========================================================
let g:WhichKeyDesc_fold_prefix = "<leader>z Folding"
let g:WhichKeyDesc_fold_all = "<leader>zc Fold all regions"
let g:WhichKeyDesc_unfold_all = "<leader>zo Unfold all regions"
let g:WhichKeyDesc_fold_region = "<leader>zf Fold region"
let g:WhichKeyDesc_unfold_region = "<leader>zu Unfold region"

nnoremap <silent> <leader>zc :action CollapseAllRegions<CR>
nnoremap <silent> <leader>zo :action ExpandAllRegions<CR>
nnoremap <silent> <leader>zf :action CollapseRegion<CR>
nnoremap <silent> <leader>zu :action ExpandRegion<CR>

" Window actions
"" ========================================================
let g:WhichKeyDesc_window = "<leader>w Window actions"
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>ws Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"
let g:WhichKeyDesc_window_split_pin_tab = "<leader>wt Pin active tab"

nnoremap <silent> <leader>wv :action SplitVertically<CR>
nnoremap <silent> <leader>ws :action SplitHorizontally<CR>
nnoremap <silent> <leader>wu :action Unsplit<CR>
nnoremap <silent> <leader>wm :action MoveEditorToOppositeTabGroup<CR>

nnoremap <leader>wu :action Unsplit<CR>
nnoremap <leader>wm :action MoveEditorToOppositeTabGroup
nnoremap <leader>wt :action PinActiveTab

" Display options
"" ========================================================
let g:WhichKeyDesc_display = "<leader>u UI options"
let g:WhichKeyDesc_zen_mode = "<leader>uz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>ud Toggle Distraction-Free mode"
let g:WhichKeyDesc_full_screen = "<leader>uf Toggle full screen"
let g:WhichKeyDesc_scope = "<leader>us Scope action prefix"
let g:WhichKeyDesc_scope_out = "<leader>uso Highlight outside"
let g:WhichKeyDesc_scope_in = "<leader>usi Highlight inside"

nnoremap <silent> <leader>ud :action ToggleDistractionFreeMode<CR>
nnoremap <silent> <leader>uz :action ToggleZenMode<CR>
nnoremap <silent> <leader>uf :action ToggleFullScreen<CR>
nnoremap <silent> <leader>uso :action Rainbow.ScopeOutsideHighlightingRestrainAction<CR>
nnoremap <silent> <leader>usi :action Rainbow.ScopeHighlightingAction<CR>

" Build tools
"" ========================================================
let g:WhichKeyDesc_build = "<leader>b Build tools"
let g:WhichKeyDesc_build_run = "<leader>br Run"
let g:WhichKeyDesc_build_debug = "<leader>bd Debug"
let g:WhichKeyDesc_build_stop = "<leader>bs Stop"
let g:WhichKeyDesc_build_more = "<leader>bt More Actions"
let g:WhichKeyDesc_build_debug_break_point= "<leader>bl Toggle line breakpoint"

nnoremap <silent> <leader>br :action Run<CR>
nnoremap <silent> <leader>bd :action Debug<CR>
nnoremap <silent> <leader>bs :action Stop<CR>
nnoremap <silent> <leader>bt :action MoreRunToolbarActions<CR>
nnoremap <silent> <leader>bl :action ToggleLineBreakpoint<CR>

" File navigation
"" ========================================================
let g:WhichKeyDesc_file_nav = "<leader>g File navigation"
let g:WhichKeyDesc_file_nav_goto_file = "<leader>gf Go to file"
let g:WhichKeyDesc_file_nav_goto_content = "<leader>gc Search for file content"
let g:WhichKeyDesc_file_nav_show_recent_files = "<leader>gr Show recent files"
let g:WhichKeyDesc_file_nav_show_recent_locations = "<leader>gl Show recent locations"

nnoremap <silent> <leader>gf :action GotoFile<CR>
nnoremap <silent> <leader>gr :action RecentFiles<CR>
nnoremap <silent> <leader>gc :action FindInPath<CR>
nnoremap <silent> <leader>gl :action RecentLocations<CR>
nnoremap <silent> <leader>gs :action NewScratchFile<CR>

" Refactoring
"" ========================================================
let g:WhichKeyDesc_refactoring_prefix = "<leader>r Refactoring actions"
let g:WhichKeyDesc_refactoring_reformat_code = "<leader>rf Reformat code"
let g:WhichKeyDesc_refactoring_optimize_imports = "<leader>ro Optimize imports"
let g:WhichKeyDesc_refactoring_rename = "<leader>rn Rename element"
let g:WhichKeyDesc_refactoring_method = "<leader>rm Extract method"
let g:WhichKeyDesc_refactoring_variable = "<leader>rv Introduce variable"
let g:WhichKeyDesc_refactoring_field = "<leader>rc Introduce field"
let g:WhichKeyDesc_refactoring_prop = "<leader>rp Introduce property"
let g:WhichKeyDesc_refactoring_signature = "<leader>rs Change signature"
let g:WhichKeyDesc_refactoring_all = "<leader>rr Open refactorings list"
let g:WhichKeyDesc_refactoring_generate = "<leader>rg Generate"
let g:WhichKeyDesc_refactoring_surround = "<leader>rw Surround with"
let g:WhichKeyDesc_refactoring_change_case = "<leader>ru Change case"

nnoremap <silent> <leader>ro :action OptimizeImports<CR>
nnoremap <silent> <leader>rf :action ReformatCode<CR>:action OptimizeImports<CR>
nnoremap <silent> <leader>rn :action RenameElement<CR>
nnoremap <silent> <leader>rm :action ExtractMethod<CR>
nnoremap <silent> <leader>rv :action IntroduceVariable<CR>
nnoremap <silent> <leader>rc :action IntroduceField<CR>
nnoremap <silent> <leader>rp :action refactoring.introduce.property<CR>
nnoremap <silent> <leader>rs :action ChangeSignature<CR>
nnoremap <silent> <leader>rr :action Refactorings.QuickListPopupAction<CR>
vnoremap <silent> <leader>rr :action Refactorings.QuickListPopupAction<CR>
xnoremap <silent> <leader>rr :action Refactorings.QuickListPopupAction<CR>
nnoremap <silent> <leader>rg :action Generate<CR>
nnoremap <silent> <leader>rw :action SurroundWith<CR>
nnoremap <silent> <leader>ru :action StringManipulation.ToSnakeCaseOrCamelCase<CR>
nnoremap <silent> <leader>rt :action osmedile.intellij.stringmanip.PopupChoiceAction<CR>

" Go to code
"" ========================================================
nnoremap <silent> gy :action GotoTypeDeclaration<CR>
nnoremap <silent> gi :action GotoImplementation<CR>
nnoremap <silent> gr :action ShowUsages<CR>
nnoremap <silent> gR :action FindUsages<CR>
nnoremap <silent> gd :action GotoDeclaration<CR>
nnoremap <silent> gs :action GotoSuperMethod<CR>
nnoremap <silent> gt :action GotoTest<CR>

" Git windows
"" ========================================================
let g:WhichKeyDesc_git_prefix = "<leader>v Git Operations"
let g:WhichKeyDesc_git_fetch = "<leader>vf Fetch"
let g:WhichKeyDesc_git_status = "<leader>vs Open status dialog"
let g:WhichKeyDesc_git_commit = "<leader>vc Open Commit dialog"
let g:WhichKeyDesc_git_new_branch = "<leader>vn New Branch"
let g:WhichKeyDesc_git_push = "<leader>vk Push committed"
let g:WhichKeyDesc_git_pull = "<leader>vt Pull"
let g:WhichKeyDesc_git_annotate = "<leader>va Annotate"
let g:WhichKeyDesc_git_rollback = "<leader>vu Rollback changes in line"
let g:WhichKeyDesc_git_branches = "<leader>vb Open branches list"

nnoremap <silent> <leader>vc :action CheckinProject<CR>
nnoremap <silent> <leader>vf :action Git.Fetch<CR>
nnoremap <silent> <leader>vs :action ActivateVersionControlToolWindow<CR>
nnoremap <silent> <leader>vn :action GitNewBranchAction<CR>
nnoremap <silent> <leader>vk :action Vcs.Push<CR>
nnoremap <silent> <leader>vt :action Vcs.UpdateProject<CR>
nnoremap <silent> <leader>va :action Annotate<CR>
nnoremap <silent> <leader>vu :action Vcs.RollbackChangedLines<CR>
nnoremap <silent> <leader>vb :action Git.Branches<CR>
nnoremap <silent> <leader>ve :action EditSource<CR>
nnoremap <silent> <leader>vh :action Vcs.ShowTabbedFileHistory<CR>

" Errors
"" ========================================================
let g:WhichKeyDesc_diagnostics_next = "[e Go to next error"
let g:WhichKeyDesc_diagnostics_prev = "]e Go to previous error"

nnoremap <silent> [e :action GotoPreviousError<CR>
nnoremap <silent> ]e :action GotoNextError<CR>
nnoremap <silent> [m :action MethodUp<CR>
nnoremap <silent> ]m :action MethodDown<CR>

" Method
"" ========================================================
let g:WhichKeyDesc_method_up = "[m Method Up"
let g:WhichKeyDesc_method_down = "]m Method Down"

nnoremap <silent> [m :<C-u>action MethodUp<CR>
nnoremap <silent> ]m :<C-u>action MethodDown<CR>

" Tools
"" ========================================================
let g:WhichKeyDesc_tools_prefix = "<leader>t Tools navigation"
let g:WhichKeyDesc_tools_term = "<leader>tt Open terminal window"
let g:WhichKeyDesc_tools_debug = "<leader>td Open debug window"
let g:WhichKeyDesc_tools_run = "<leader>tr Open run window"
let g:WhichKeyDesc_tools_structure = "<leader>ts Open structure window"
let g:WhichKeyDesc_tools_recent_proj = "<leader>tp Open recent projects"
let g:WhichKeyDesc_tools_set_bookmarks = "<leader>tb Set mnemonic bookmark"
let g:WhichKeuDesc_tools_open_bookmark_menu = "<leader>tm Open bookmark menu"

nnoremap <silent> <leader>tt :action ActivateTerminalToolWindow<CR>
nnoremap <silent> <leader>tr :action ChooseRunConfiguration<CR>
nnoremap <silent> <leader>ts :action FileStructurePopup<CR>
nnoremap <silent> <leader>tn :action NewClass<CR>
nnoremap <silent> <leader>tb :action ToggleBookmarkWithMnemonic<CR>
nnoremap <silent> <leader>tm :action Bookmarks<CR>

nnoremap <silent> <leader>po :action $LRU<CR>
nnoremap <silent> <leader>pp :action PreviousProjectWindow<CR>
nnoremap <silent> <leader>pn :action NextProjectWindow<CR>

" Lsp
nnoremap <silent> <leader>lh :action ToggleInlayHintsGloballyAction<CR>

nmap <leader>h :action HighlightUsagesInFile<CR>

nnoremap L $
nnoremap H ^
vnoremap L $
vnoremap H ^

nnoremap <silent> <leader>e :action ActivateProjectToolWindow<CR>
nnoremap <silent> <leader>n :action OpenNetrw<CR>

" map й q
" map ц w
" map у e
" map к r
" map е t
" map н y
" map г u
" map ш i
" map щ o
" map з p
" map х [
" map ъ ]
" map ф a
" map ы s
" map в d
" map а f
" map п g
" map р h
" map о j
" map л k
" map д l
" map ж ;
" map э '
" map ё \
" map я z
" map ч x
" map с c
" map м v
" map и b
" map т n
" map ь m
" map б ,
" map ю .
" map Й Q
" map Ц W
" map У E
" map К R
" map Е T
" map Н Y
" map Г U
" map Ш I
" map Щ O
" map З P
" map Х {
" map Ъ }
" map Ф A
" map Ы S
" map В D
" map А F
" map П G
" map Р H
" map О J
" map Л K
" map Д L
" map Ж :
" map Э "
" map Я Z
" map Ч X
" map С C
" map М V
" map И B
" map Т N
" map Ь M
" map Б <
" map Ю >
" map Ё /|
